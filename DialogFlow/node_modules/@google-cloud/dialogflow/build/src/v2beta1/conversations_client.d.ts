/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for managing
 *  {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversations}.
 * @class
 * @memberof v2beta1
 */
export declare class ConversationsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    conversationsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ConversationsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ConversationsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new conversation. Conversations are auto-completed after 24
     * hours.
     *
     * Conversation Lifecycle:
     * There are two stages during a conversation: Automated Agent Stage and
     * Assist Stage.
     *
     * For Automated Agent Stage, there will be a dialogflow agent responding to
     * user queries.
     *
     * For Assist Stage, there's no dialogflow agent responding to user queries.
     * But we will provide suggestions which are generated from conversation.
     *
     * If
     * {@link protos.google.cloud.dialogflow.v2beta1.Conversation.conversation_profile|Conversation.conversation_profile}
     * is configured for a dialogflow agent, conversation will start from
     * `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And
     * during `Automated Agent Stage`, once an
     * {@link protos.google.cloud.dialogflow.v2beta1.Intent|Intent} with
     * {@link protos.google.cloud.dialogflow.v2beta1.Intent.live_agent_handoff|Intent.live_agent_handoff}
     * is triggered, conversation will transfer to Assist Stage.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource identifier of the project creating the conversation.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {google.cloud.dialogflow.v2beta1.Conversation} request.conversation
     *   Required. The conversation to create.
     * @param {string} [request.conversationId]
     *   Optional. Identifier of the conversation. Generally it's auto generated by
     *   Google. Only set it if you cannot wait for the response to return a
     *   auto-generated one to you.
     *
     *   The conversation ID must be compliant with the regression fomula
     *   `{@link protos.a-zA-Z0-9_-|a-zA-Z}*` with the characters length in range of [3,64].
     *   If the field is provided, the caller is resposible for
     *   1. the uniqueness of the ID, otherwise the request will be rejected.
     *   2. the consistency for whether to use custom ID or not under a project to
     *   better ensure uniqueness.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.create_conversation.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_CreateConversation_async
     */
    createConversation(request?: protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IConversation,
        (protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest | undefined),
        {} | undefined
    ]>;
    createConversation(request: protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    createConversation(request: protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves the specific conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the conversation. Format:
     *   `projects/<Project ID>/locations/<Location ID>/conversations/<Conversation
     *   ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.get_conversation.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_GetConversation_async
     */
    getConversation(request?: protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IConversation,
        (protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest | undefined),
        {} | undefined
    ]>;
    getConversation(request: protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    getConversation(request: protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Completes the specified conversation. Finished conversations are purged
     * from the database after 30 days.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource identifier of the conversation to close.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.complete_conversation.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_CompleteConversation_async
     */
    completeConversation(request?: protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IConversation,
        (protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest | undefined),
        {} | undefined
    ]>;
    completeConversation(request: protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest | null | undefined, {} | null | undefined>): void;
    completeConversation(request: protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IConversation, protos.google.cloud.dialogflow.v2beta1.ICompleteConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Batch ingests messages to conversation. Customers can use this RPC to
     * ingest historical messages to conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource identifier of the conversation to create message.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`.
     * @param {number[]} request.requests
     *   Required. A maximum of 300 messages can be created in a batch.
     *   {@link protos.|CreateMessageRequest.message.send_time} is required. All created
     *   messages will have identical
     *   {@link protos.google.cloud.dialogflow.v2beta1.Message.create_time|Message.create_time}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.BatchCreateMessagesResponse|BatchCreateMessagesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.batch_create_messages.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_BatchCreateMessages_async
     */
    batchCreateMessages(request?: protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesResponse,
        (protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest | undefined),
        {} | undefined
    ]>;
    batchCreateMessages(request: protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesResponse, protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest | null | undefined, {} | null | undefined>): void;
    batchCreateMessages(request: protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesResponse, protos.google.cloud.dialogflow.v2beta1.IBatchCreateMessagesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Suggest summary for a conversation based on specific historical messages.
     * The range of the messages to be used for summary can be specified in the
     * request.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.conversation
     *   Required. The conversation to fetch suggestion for.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`.
     * @param {string} request.latestMessage
     *   The name of the latest conversation message used as context for
     *   compiling suggestion. If empty, the latest message of the conversation will
     *   be used.
     *
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>/messages/<Message ID>`.
     * @param {number} request.contextSize
     *   Max number of messages prior to and including
     *   [latest_message] to use as context when compiling the
     *   suggestion. By default 500 and at most 1000.
     * @param {google.cloud.dialogflow.v2beta1.AssistQueryParameters} request.assistQueryParams
     *   Parameters for a human assist query. Only used for POC/demo purpose.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.SuggestConversationSummaryResponse|SuggestConversationSummaryResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.suggest_conversation_summary.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_SuggestConversationSummary_async
     */
    suggestConversationSummary(request?: protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryResponse,
        (protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest | undefined),
        {} | undefined
    ]>;
    suggestConversationSummary(request: protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryResponse, protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest | null | undefined, {} | null | undefined>): void;
    suggestConversationSummary(request: protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryResponse, protos.google.cloud.dialogflow.v2beta1.ISuggestConversationSummaryRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Generates and returns a summary for a conversation that does not have a
     * resource created for it.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.dialogflow.v2beta1.GenerateStatelessSummaryRequest.MinimalConversation} request.statelessConversation
     *   Required. The conversation to suggest a summary for.
     * @param {google.cloud.dialogflow.v2beta1.ConversationProfile} request.conversationProfile
     *   Required. A ConversationProfile containing information required for Summary
     *   generation.
     *   Required fields: {language_code, security_settings}
     *   Optional fields: {agent_assistant_config}
     * @param {string} request.latestMessage
     *   The name of the latest conversation message used as context for
     *   generating a Summary. If empty, the latest message of the conversation will
     *   be used. The format is specific to the user and the names of the messages
     *   provided.
     * @param {number} request.maxContextSize
     *   Max number of messages prior to and including
     *   [latest_message] to use as context when compiling the
     *   suggestion. By default 500 and at most 1000.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.GenerateStatelessSummaryResponse|GenerateStatelessSummaryResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.generate_stateless_summary.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_GenerateStatelessSummary_async
     */
    generateStatelessSummary(request?: protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryResponse,
        (protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest | undefined),
        {} | undefined
    ]>;
    generateStatelessSummary(request: protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryResponse, protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest | null | undefined, {} | null | undefined>): void;
    generateStatelessSummary(request: protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryResponse, protos.google.cloud.dialogflow.v2beta1.IGenerateStatelessSummaryRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Get answers for the given query based on knowledge documents.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent resource contains the conversation profile
     *   Format: 'projects/<Project ID>' or `projects/<Project
     *   ID>/locations/<Location ID>`.
     * @param {google.cloud.dialogflow.v2beta1.TextInput} request.query
     *   Required. The natural language text query for knowledge search.
     * @param {string} request.conversationProfile
     *   Required. The conversation profile used to configure the search.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversationProfiles/<Conversation Profile ID>`.
     * @param {string} request.sessionId
     *   The ID of the search session.
     *   The session_id can be combined with Dialogflow V3 Agent ID retrieved from
     *   conversation profile or on its own to identify a search session. The search
     *   history of the same session will impact the search result. It's up to the
     *   API caller to choose an appropriate `Session ID`. It can be a random number
     *   or some type of session identifiers (preferably hashed). The length must
     *   not exceed 36 characters.
     * @param {string} request.conversation
     *   The conversation (between human agent and end user) where the search
     *   request is triggered. Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`.
     * @param {string} request.latestMessage
     *   The name of the latest conversation message when the request is
     *   triggered.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>/messages/<Message ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dialogflow.v2beta1.SearchKnowledgeResponse|SearchKnowledgeResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.search_knowledge.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_SearchKnowledge_async
     */
    searchKnowledge(request?: protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeResponse,
        (protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest | undefined),
        {} | undefined
    ]>;
    searchKnowledge(request: protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeResponse, protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest | null | undefined, {} | null | undefined>): void;
    searchKnowledge(request: protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest, callback: Callback<protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeResponse, protos.google.cloud.dialogflow.v2beta1.ISearchKnowledgeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns the list of all conversations in the specified project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project from which to list all conversation.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   A filter expression that filters conversations listed in the response. In
     *   general, the expression must specify the field name, a comparison operator,
     *   and the value to use for filtering:
     *   <ul>
     *     <li>The value must be a string, a number, or a boolean.</li>
     *     <li>The comparison operator must be either `=`,`!=`, `>`, or `<`.</li>
     *     <li>To filter on multiple expressions, separate the
     *         expressions with `AND` or `OR` (omitting both implies `AND`).</li>
     *     <li>For clarity, expressions can be enclosed in parentheses.</li>
     *   </ul>
     *   Only `lifecycle_state` can be filtered on in this way. For example,
     *   the following expression only returns `COMPLETED` conversations:
     *
     *   `lifecycle_state = "COMPLETED"`
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversations(request?: protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IConversation[],
        protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest | null,
        protos.google.cloud.dialogflow.v2beta1.IListConversationsResponse
    ]>;
    listConversations(request: protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, protos.google.cloud.dialogflow.v2beta1.IListConversationsResponse | null | undefined, protos.google.cloud.dialogflow.v2beta1.IConversation>): void;
    listConversations(request: protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, protos.google.cloud.dialogflow.v2beta1.IListConversationsResponse | null | undefined, protos.google.cloud.dialogflow.v2beta1.IConversation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project from which to list all conversation.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   A filter expression that filters conversations listed in the response. In
     *   general, the expression must specify the field name, a comparison operator,
     *   and the value to use for filtering:
     *   <ul>
     *     <li>The value must be a string, a number, or a boolean.</li>
     *     <li>The comparison operator must be either `=`,`!=`, `>`, or `<`.</li>
     *     <li>To filter on multiple expressions, separate the
     *         expressions with `AND` or `OR` (omitting both implies `AND`).</li>
     *     <li>For clarity, expressions can be enclosed in parentheses.</li>
     *   </ul>
     *   Only `lifecycle_state` can be filtered on in this way. For example,
     *   the following expression only returns `COMPLETED` conversations:
     *
     *   `lifecycle_state = "COMPLETED"`
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversationsStream(request?: protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConversations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project from which to list all conversation.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {string} request.filter
     *   A filter expression that filters conversations listed in the response. In
     *   general, the expression must specify the field name, a comparison operator,
     *   and the value to use for filtering:
     *   <ul>
     *     <li>The value must be a string, a number, or a boolean.</li>
     *     <li>The comparison operator must be either `=`,`!=`, `>`, or `<`.</li>
     *     <li>To filter on multiple expressions, separate the
     *         expressions with `AND` or `OR` (omitting both implies `AND`).</li>
     *     <li>For clarity, expressions can be enclosed in parentheses.</li>
     *   </ul>
     *   Only `lifecycle_state` can be filtered on in this way. For example,
     *   the following expression only returns `COMPLETED` conversations:
     *
     *   `lifecycle_state = "COMPLETED"`
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dialogflow.v2beta1.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.list_conversations.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_ListConversations_async
     */
    listConversationsAsync(request?: protos.google.cloud.dialogflow.v2beta1.IListConversationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dialogflow.v2beta1.IConversation>;
    /**
     * Lists messages that belong to a given conversation.
     * `messages` are ordered by `create_time` in descending order. To fetch
     * updates without duplication, send request with filter
     * `create_time_epoch_microseconds >
     * [first item's create_time of previous request]` and empty page_token.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the conversation to list messages for.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`
     * @param {string} request.filter
     *   Optional. Filter on message fields. Currently predicates on `create_time`
     *   and `create_time_epoch_microseconds` are supported. `create_time` only
     *   support milliseconds accuracy. E.g.,
     *   `create_time_epoch_microseconds > 1551790877964485` or
     *   `create_time > "2017-01-15T01:30:15.01Z"`.
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dialogflow.v2beta1.Message|Message}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listMessagesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMessages(request?: protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.v2beta1.IMessage[],
        protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest | null,
        protos.google.cloud.dialogflow.v2beta1.IListMessagesResponse
    ]>;
    listMessages(request: protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, protos.google.cloud.dialogflow.v2beta1.IListMessagesResponse | null | undefined, protos.google.cloud.dialogflow.v2beta1.IMessage>): void;
    listMessages(request: protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, protos.google.cloud.dialogflow.v2beta1.IListMessagesResponse | null | undefined, protos.google.cloud.dialogflow.v2beta1.IMessage>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the conversation to list messages for.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`
     * @param {string} request.filter
     *   Optional. Filter on message fields. Currently predicates on `create_time`
     *   and `create_time_epoch_microseconds` are supported. `create_time` only
     *   support milliseconds accuracy. E.g.,
     *   `create_time_epoch_microseconds > 1551790877964485` or
     *   `create_time > "2017-01-15T01:30:15.01Z"`.
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2beta1.Message|Message} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMessagesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMessagesStream(request?: protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listMessages`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the conversation to list messages for.
     *   Format: `projects/<Project ID>/locations/<Location
     *   ID>/conversations/<Conversation ID>`
     * @param {string} request.filter
     *   Optional. Filter on message fields. Currently predicates on `create_time`
     *   and `create_time_epoch_microseconds` are supported. `create_time` only
     *   support milliseconds accuracy. E.g.,
     *   `create_time_epoch_microseconds > 1551790877964485` or
     *   `create_time > "2017-01-15T01:30:15.01Z"`.
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {number} request.pageSize
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   Optional. The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dialogflow.v2beta1.Message|Message}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta1/conversations.list_messages.js</caption>
     * region_tag:dialogflow_v2beta1_generated_Conversations_ListMessages_async
     */
    listMessagesAsync(request?: protos.google.cloud.dialogflow.v2beta1.IListMessagesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dialogflow.v2beta1.IMessage>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectAgent resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectAgentPath(project: string): string;
    /**
     * Parse the project from ProjectAgent resource.
     *
     * @param {string} projectAgentName
     *   A fully-qualified path representing project_agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentName(projectAgentName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEntityType resource name string.
     *
     * @param {string} project
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectAgentEntityTypePath(project: string, entityType: string): string;
    /**
     * Parse the project from ProjectAgentEntityType resource.
     *
     * @param {string} projectAgentEntityTypeName
     *   A fully-qualified path representing project_agent_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEntityTypeName(projectAgentEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectAgentEntityType resource.
     *
     * @param {string} projectAgentEntityTypeName
     *   A fully-qualified path representing project_agent_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectAgentEntityTypeName(projectAgentEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEnvironment resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    projectAgentEnvironmentPath(project: string, environment: string): string;
    /**
     * Parse the project from ProjectAgentEnvironment resource.
     *
     * @param {string} projectAgentEnvironmentName
     *   A fully-qualified path representing project_agent_environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEnvironmentName(projectAgentEnvironmentName: string): string | number;
    /**
     * Parse the environment from ProjectAgentEnvironment resource.
     *
     * @param {string} projectAgentEnvironmentName
     *   A fully-qualified path representing project_agent_environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectAgentEnvironmentName(projectAgentEnvironmentName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEnvironmentUserSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectAgentEnvironmentUserSessionContextPath(project: string, environment: string, user: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the environment from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the user from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEnvironmentUserSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectAgentEnvironmentUserSessionEntityTypePath(project: string, environment: string, user: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the environment from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the user from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectAgentFulfillment resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectAgentFulfillmentPath(project: string): string;
    /**
     * Parse the project from ProjectAgentFulfillment resource.
     *
     * @param {string} projectAgentFulfillmentName
     *   A fully-qualified path representing project_agent_fulfillment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentFulfillmentName(projectAgentFulfillmentName: string): string | number;
    /**
     * Return a fully-qualified projectAgentIntent resource name string.
     *
     * @param {string} project
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    projectAgentIntentPath(project: string, intent: string): string;
    /**
     * Parse the project from ProjectAgentIntent resource.
     *
     * @param {string} projectAgentIntentName
     *   A fully-qualified path representing project_agent_intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentIntentName(projectAgentIntentName: string): string | number;
    /**
     * Parse the intent from ProjectAgentIntent resource.
     *
     * @param {string} projectAgentIntentName
     *   A fully-qualified path representing project_agent_intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromProjectAgentIntentName(projectAgentIntentName: string): string | number;
    /**
     * Return a fully-qualified projectAgentSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectAgentSessionContextPath(project: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectAgentSessionEntityTypePath(project: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectAgentVersion resource name string.
     *
     * @param {string} project
     * @param {string} version
     * @returns {string} Resource name string.
     */
    projectAgentVersionPath(project: string, version: string): string;
    /**
     * Parse the project from ProjectAgentVersion resource.
     *
     * @param {string} projectAgentVersionName
     *   A fully-qualified path representing project_agent_version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentVersionName(projectAgentVersionName: string): string | number;
    /**
     * Parse the version from ProjectAgentVersion resource.
     *
     * @param {string} projectAgentVersionName
     *   A fully-qualified path representing project_agent_version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromProjectAgentVersionName(projectAgentVersionName: string): string | number;
    /**
     * Return a fully-qualified projectAnswerRecord resource name string.
     *
     * @param {string} project
     * @param {string} answer_record
     * @returns {string} Resource name string.
     */
    projectAnswerRecordPath(project: string, answerRecord: string): string;
    /**
     * Parse the project from ProjectAnswerRecord resource.
     *
     * @param {string} projectAnswerRecordName
     *   A fully-qualified path representing project_answer_record resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAnswerRecordName(projectAnswerRecordName: string): string | number;
    /**
     * Parse the answer_record from ProjectAnswerRecord resource.
     *
     * @param {string} projectAnswerRecordName
     *   A fully-qualified path representing project_answer_record resource.
     * @returns {string} A string representing the answer_record.
     */
    matchAnswerRecordFromProjectAnswerRecordName(projectAnswerRecordName: string): string | number;
    /**
     * Return a fully-qualified projectConversation resource name string.
     *
     * @param {string} project
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectConversationPath(project: string, conversation: string): string;
    /**
     * Parse the project from ProjectConversation resource.
     *
     * @param {string} projectConversationName
     *   A fully-qualified path representing project_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConversationName(projectConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectConversation resource.
     *
     * @param {string} projectConversationName
     *   A fully-qualified path representing project_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectConversationName(projectConversationName: string): string | number;
    /**
     * Return a fully-qualified projectConversationMessage resource name string.
     *
     * @param {string} project
     * @param {string} conversation
     * @param {string} message
     * @returns {string} Resource name string.
     */
    projectConversationMessagePath(project: string, conversation: string, message: string): string;
    /**
     * Parse the project from ProjectConversationMessage resource.
     *
     * @param {string} projectConversationMessageName
     *   A fully-qualified path representing project_conversation_message resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConversationMessageName(projectConversationMessageName: string): string | number;
    /**
     * Parse the conversation from ProjectConversationMessage resource.
     *
     * @param {string} projectConversationMessageName
     *   A fully-qualified path representing project_conversation_message resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectConversationMessageName(projectConversationMessageName: string): string | number;
    /**
     * Parse the message from ProjectConversationMessage resource.
     *
     * @param {string} projectConversationMessageName
     *   A fully-qualified path representing project_conversation_message resource.
     * @returns {string} A string representing the message.
     */
    matchMessageFromProjectConversationMessageName(projectConversationMessageName: string): string | number;
    /**
     * Return a fully-qualified projectConversationParticipant resource name string.
     *
     * @param {string} project
     * @param {string} conversation
     * @param {string} participant
     * @returns {string} Resource name string.
     */
    projectConversationParticipantPath(project: string, conversation: string, participant: string): string;
    /**
     * Parse the project from ProjectConversationParticipant resource.
     *
     * @param {string} projectConversationParticipantName
     *   A fully-qualified path representing project_conversation_participant resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConversationParticipantName(projectConversationParticipantName: string): string | number;
    /**
     * Parse the conversation from ProjectConversationParticipant resource.
     *
     * @param {string} projectConversationParticipantName
     *   A fully-qualified path representing project_conversation_participant resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectConversationParticipantName(projectConversationParticipantName: string): string | number;
    /**
     * Parse the participant from ProjectConversationParticipant resource.
     *
     * @param {string} projectConversationParticipantName
     *   A fully-qualified path representing project_conversation_participant resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromProjectConversationParticipantName(projectConversationParticipantName: string): string | number;
    /**
     * Return a fully-qualified projectConversationProfile resource name string.
     *
     * @param {string} project
     * @param {string} conversation_profile
     * @returns {string} Resource name string.
     */
    projectConversationProfilePath(project: string, conversationProfile: string): string;
    /**
     * Parse the project from ProjectConversationProfile resource.
     *
     * @param {string} projectConversationProfileName
     *   A fully-qualified path representing project_conversation_profile resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConversationProfileName(projectConversationProfileName: string): string | number;
    /**
     * Parse the conversation_profile from ProjectConversationProfile resource.
     *
     * @param {string} projectConversationProfileName
     *   A fully-qualified path representing project_conversation_profile resource.
     * @returns {string} A string representing the conversation_profile.
     */
    matchConversationProfileFromProjectConversationProfileName(projectConversationProfileName: string): string | number;
    /**
     * Return a fully-qualified projectKnowledgeBase resource name string.
     *
     * @param {string} project
     * @param {string} knowledge_base
     * @returns {string} Resource name string.
     */
    projectKnowledgeBasePath(project: string, knowledgeBase: string): string;
    /**
     * Parse the project from ProjectKnowledgeBase resource.
     *
     * @param {string} projectKnowledgeBaseName
     *   A fully-qualified path representing project_knowledge_base resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectKnowledgeBaseName(projectKnowledgeBaseName: string): string | number;
    /**
     * Parse the knowledge_base from ProjectKnowledgeBase resource.
     *
     * @param {string} projectKnowledgeBaseName
     *   A fully-qualified path representing project_knowledge_base resource.
     * @returns {string} A string representing the knowledge_base.
     */
    matchKnowledgeBaseFromProjectKnowledgeBaseName(projectKnowledgeBaseName: string): string | number;
    /**
     * Return a fully-qualified projectKnowledgeBaseDocument resource name string.
     *
     * @param {string} project
     * @param {string} knowledge_base
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectKnowledgeBaseDocumentPath(project: string, knowledgeBase: string, document: string): string;
    /**
     * Parse the project from ProjectKnowledgeBaseDocument resource.
     *
     * @param {string} projectKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_knowledge_base_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName: string): string | number;
    /**
     * Parse the knowledge_base from ProjectKnowledgeBaseDocument resource.
     *
     * @param {string} projectKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_knowledge_base_document resource.
     * @returns {string} A string representing the knowledge_base.
     */
    matchKnowledgeBaseFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName: string): string | number;
    /**
     * Parse the document from ProjectKnowledgeBaseDocument resource.
     *
     * @param {string} projectKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_knowledge_base_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    projectLocationAgentPath(project: string, location: string): string;
    /**
     * Parse the project from ProjectLocationAgent resource.
     *
     * @param {string} projectLocationAgentName
     *   A fully-qualified path representing project_location_agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentName(projectLocationAgentName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgent resource.
     *
     * @param {string} projectLocationAgentName
     *   A fully-qualified path representing project_location_agent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentName(projectLocationAgentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEntityTypePath(project: string, location: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentEntityType resource.
     *
     * @param {string} projectLocationAgentEntityTypeName
     *   A fully-qualified path representing project_location_agent_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEntityType resource.
     *
     * @param {string} projectLocationAgentEntityTypeName
     *   A fully-qualified path representing project_location_agent_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentEntityType resource.
     *
     * @param {string} projectLocationAgentEntityTypeName
     *   A fully-qualified path representing project_location_agent_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEnvironment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentPath(project: string, location: string, environment: string): string;
    /**
     * Parse the project from ProjectLocationAgentEnvironment resource.
     *
     * @param {string} projectLocationAgentEnvironmentName
     *   A fully-qualified path representing project_location_agent_environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEnvironment resource.
     *
     * @param {string} projectLocationAgentEnvironmentName
     *   A fully-qualified path representing project_location_agent_environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName: string): string | number;
    /**
     * Parse the environment from ProjectLocationAgentEnvironment resource.
     *
     * @param {string} projectLocationAgentEnvironmentName
     *   A fully-qualified path representing project_location_agent_environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentUserSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentUserSessionContextPath(project: string, location: string, environment: string, user: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the user from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectLocationAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentUserSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentUserSessionEntityTypePath(project: string, location: string, environment: string, user: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the user from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentFulfillment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    projectLocationAgentFulfillmentPath(project: string, location: string): string;
    /**
     * Parse the project from ProjectLocationAgentFulfillment resource.
     *
     * @param {string} projectLocationAgentFulfillmentName
     *   A fully-qualified path representing project_location_agent_fulfillment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentFulfillment resource.
     *
     * @param {string} projectLocationAgentFulfillmentName
     *   A fully-qualified path representing project_location_agent_fulfillment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentIntent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    projectLocationAgentIntentPath(project: string, location: string, intent: string): string;
    /**
     * Parse the project from ProjectLocationAgentIntent resource.
     *
     * @param {string} projectLocationAgentIntentName
     *   A fully-qualified path representing project_location_agent_intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentIntentName(projectLocationAgentIntentName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentIntent resource.
     *
     * @param {string} projectLocationAgentIntentName
     *   A fully-qualified path representing project_location_agent_intent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentIntentName(projectLocationAgentIntentName: string): string | number;
    /**
     * Parse the intent from ProjectLocationAgentIntent resource.
     *
     * @param {string} projectLocationAgentIntentName
     *   A fully-qualified path representing project_location_agent_intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromProjectLocationAgentIntentName(projectLocationAgentIntentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionContextPath(project: string, location: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectLocationAgentSessionContext resource.
     *
     * @param {string} projectLocationAgentSessionContextName
     *   A fully-qualified path representing project_location_agent_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentSessionContext resource.
     *
     * @param {string} projectLocationAgentSessionContextName
     *   A fully-qualified path representing project_location_agent_session_context resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentSessionContext resource.
     *
     * @param {string} projectLocationAgentSessionContextName
     *   A fully-qualified path representing project_location_agent_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectLocationAgentSessionContext resource.
     *
     * @param {string} projectLocationAgentSessionContextName
     *   A fully-qualified path representing project_location_agent_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionEntityTypePath(project: string, location: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentVersion resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} version
     * @returns {string} Resource name string.
     */
    projectLocationAgentVersionPath(project: string, location: string, version: string): string;
    /**
     * Parse the project from ProjectLocationAgentVersion resource.
     *
     * @param {string} projectLocationAgentVersionName
     *   A fully-qualified path representing project_location_agent_version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentVersionName(projectLocationAgentVersionName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentVersion resource.
     *
     * @param {string} projectLocationAgentVersionName
     *   A fully-qualified path representing project_location_agent_version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentVersionName(projectLocationAgentVersionName: string): string | number;
    /**
     * Parse the version from ProjectLocationAgentVersion resource.
     *
     * @param {string} projectLocationAgentVersionName
     *   A fully-qualified path representing project_location_agent_version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromProjectLocationAgentVersionName(projectLocationAgentVersionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAnswerRecord resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} answer_record
     * @returns {string} Resource name string.
     */
    projectLocationAnswerRecordPath(project: string, location: string, answerRecord: string): string;
    /**
     * Parse the project from ProjectLocationAnswerRecord resource.
     *
     * @param {string} projectLocationAnswerRecordName
     *   A fully-qualified path representing project_location_answer_record resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName: string): string | number;
    /**
     * Parse the location from ProjectLocationAnswerRecord resource.
     *
     * @param {string} projectLocationAnswerRecordName
     *   A fully-qualified path representing project_location_answer_record resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName: string): string | number;
    /**
     * Parse the answer_record from ProjectLocationAnswerRecord resource.
     *
     * @param {string} projectLocationAnswerRecordName
     *   A fully-qualified path representing project_location_answer_record resource.
     * @returns {string} A string representing the answer_record.
     */
    matchAnswerRecordFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName: string): string | number;
    /**
     * Return a fully-qualified projectLocationConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationConversationPath(project: string, location: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationConversation resource.
     *
     * @param {string} projectLocationConversationName
     *   A fully-qualified path representing project_location_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationConversationName(projectLocationConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationConversation resource.
     *
     * @param {string} projectLocationConversationName
     *   A fully-qualified path representing project_location_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationConversationName(projectLocationConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationConversation resource.
     *
     * @param {string} projectLocationConversationName
     *   A fully-qualified path representing project_location_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationConversationName(projectLocationConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationConversationMessage resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} conversation
     * @param {string} message
     * @returns {string} Resource name string.
     */
    projectLocationConversationMessagePath(project: string, location: string, conversation: string, message: string): string;
    /**
     * Parse the project from ProjectLocationConversationMessage resource.
     *
     * @param {string} projectLocationConversationMessageName
     *   A fully-qualified path representing project_location_conversation_message resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationConversationMessageName(projectLocationConversationMessageName: string): string | number;
    /**
     * Parse the location from ProjectLocationConversationMessage resource.
     *
     * @param {string} projectLocationConversationMessageName
     *   A fully-qualified path representing project_location_conversation_message resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationConversationMessageName(projectLocationConversationMessageName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationConversationMessage resource.
     *
     * @param {string} projectLocationConversationMessageName
     *   A fully-qualified path representing project_location_conversation_message resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationConversationMessageName(projectLocationConversationMessageName: string): string | number;
    /**
     * Parse the message from ProjectLocationConversationMessage resource.
     *
     * @param {string} projectLocationConversationMessageName
     *   A fully-qualified path representing project_location_conversation_message resource.
     * @returns {string} A string representing the message.
     */
    matchMessageFromProjectLocationConversationMessageName(projectLocationConversationMessageName: string): string | number;
    /**
     * Return a fully-qualified projectLocationConversationParticipant resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} conversation
     * @param {string} participant
     * @returns {string} Resource name string.
     */
    projectLocationConversationParticipantPath(project: string, location: string, conversation: string, participant: string): string;
    /**
     * Parse the project from ProjectLocationConversationParticipant resource.
     *
     * @param {string} projectLocationConversationParticipantName
     *   A fully-qualified path representing project_location_conversation_participant resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName: string): string | number;
    /**
     * Parse the location from ProjectLocationConversationParticipant resource.
     *
     * @param {string} projectLocationConversationParticipantName
     *   A fully-qualified path representing project_location_conversation_participant resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationConversationParticipant resource.
     *
     * @param {string} projectLocationConversationParticipantName
     *   A fully-qualified path representing project_location_conversation_participant resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName: string): string | number;
    /**
     * Parse the participant from ProjectLocationConversationParticipant resource.
     *
     * @param {string} projectLocationConversationParticipantName
     *   A fully-qualified path representing project_location_conversation_participant resource.
     * @returns {string} A string representing the participant.
     */
    matchParticipantFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName: string): string | number;
    /**
     * Return a fully-qualified projectLocationConversationProfile resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} conversation_profile
     * @returns {string} Resource name string.
     */
    projectLocationConversationProfilePath(project: string, location: string, conversationProfile: string): string;
    /**
     * Parse the project from ProjectLocationConversationProfile resource.
     *
     * @param {string} projectLocationConversationProfileName
     *   A fully-qualified path representing project_location_conversation_profile resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationConversationProfileName(projectLocationConversationProfileName: string): string | number;
    /**
     * Parse the location from ProjectLocationConversationProfile resource.
     *
     * @param {string} projectLocationConversationProfileName
     *   A fully-qualified path representing project_location_conversation_profile resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationConversationProfileName(projectLocationConversationProfileName: string): string | number;
    /**
     * Parse the conversation_profile from ProjectLocationConversationProfile resource.
     *
     * @param {string} projectLocationConversationProfileName
     *   A fully-qualified path representing project_location_conversation_profile resource.
     * @returns {string} A string representing the conversation_profile.
     */
    matchConversationProfileFromProjectLocationConversationProfileName(projectLocationConversationProfileName: string): string | number;
    /**
     * Return a fully-qualified projectLocationKnowledgeBase resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} knowledge_base
     * @returns {string} Resource name string.
     */
    projectLocationKnowledgeBasePath(project: string, location: string, knowledgeBase: string): string;
    /**
     * Parse the project from ProjectLocationKnowledgeBase resource.
     *
     * @param {string} projectLocationKnowledgeBaseName
     *   A fully-qualified path representing project_location_knowledge_base resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName: string): string | number;
    /**
     * Parse the location from ProjectLocationKnowledgeBase resource.
     *
     * @param {string} projectLocationKnowledgeBaseName
     *   A fully-qualified path representing project_location_knowledge_base resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName: string): string | number;
    /**
     * Parse the knowledge_base from ProjectLocationKnowledgeBase resource.
     *
     * @param {string} projectLocationKnowledgeBaseName
     *   A fully-qualified path representing project_location_knowledge_base resource.
     * @returns {string} A string representing the knowledge_base.
     */
    matchKnowledgeBaseFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName: string): string | number;
    /**
     * Return a fully-qualified projectLocationKnowledgeBaseDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} knowledge_base
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationKnowledgeBaseDocumentPath(project: string, location: string, knowledgeBase: string, document: string): string;
    /**
     * Parse the project from ProjectLocationKnowledgeBaseDocument resource.
     *
     * @param {string} projectLocationKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_location_knowledge_base_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName: string): string | number;
    /**
     * Parse the location from ProjectLocationKnowledgeBaseDocument resource.
     *
     * @param {string} projectLocationKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_location_knowledge_base_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName: string): string | number;
    /**
     * Parse the knowledge_base from ProjectLocationKnowledgeBaseDocument resource.
     *
     * @param {string} projectLocationKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_location_knowledge_base_document resource.
     * @returns {string} A string representing the knowledge_base.
     */
    matchKnowledgeBaseFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName: string): string | number;
    /**
     * Parse the document from ProjectLocationKnowledgeBaseDocument resource.
     *
     * @param {string} projectLocationKnowledgeBaseDocumentName
     *   A fully-qualified path representing project_location_knowledge_base_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
